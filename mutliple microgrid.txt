#include <ilcplex/ilocplex.h>
ILOSTLBEGIN


int
main(int, char**)
{
	IloEnv env;

	try {

		int totaltime = 24;//One day
		float electricload1[24] = { 681,695,725,782,795,825,881,869,880,861,892,889,843,822,823,887,849,795,784,787,683,627,668,678};//Electicity load for MG1 w.r.t time
		float electricload2[24] = {691,705,755,792,825,885,891,929,900,891,942,939,953,922,923,887,879,895,884,797,783,727,768,758};//Electicity load for mg2 w.r.t time
		float electricload3[24] = {820,815,775,872,885,895,921,945,974,1051,1082,1029,943,962,903,897,889,875,804,789,763,723,764,744};//electric load for MG3
		float gridbuy[24] = { 84,84,84,84,84,84,97,97,97,97,97,120,120,120,120,120,120,97,97,97,97,97,84,84};//buying price from grid w.r.t time
		float gridsell[24] = {64,64,64,64,64,64,77,77,77,77,77,100,100,100,100,100,100,77,77,77,77,77,64,64};//selling price to grid w.r.t time
		float rdg1[24] = {35,38,31,24,34,35,46,80,97,113,113,120,99,88,92,72,62,34,41,35,39,29,50,55};//Power generated by Renewable at MG1 w.r.t time
		float rdg2[24] = {25,28,21,14,24,25,36,60,117,133,133,140,119,108,122,92,42,24,31,25,29,19,40,45};//renewable power at MG2
		float rdg3[24] = {25,28,21,14,24,25,36,70,87,103,103,110,89,78,82,52,42,24,31,25,29,19,40,45};//renewable at MG3
		int dg1cost = 76;//Cost for generating per kW power
		int dg2cost = 87;
		int dg3cost = 88;
		int i;

		IloModel model(env);
		IloNumVarArray Gridpowerbuy1(env, totaltime, 0, IloInfinity);//Grid power bought
		IloNumVarArray Gridpowersell1(env, totaltime, 0, IloInfinity);//Grid power sold
		IloNumVarArray Gridpowerbuy2(env, totaltime, 0, IloInfinity);//Grid power bought
		IloNumVarArray Gridpowersell2(env, totaltime, 0, IloInfinity);//Grid power sold
		IloNumVarArray Gridpowerbuy3(env, totaltime, 0, IloInfinity);//Grid power bought
		IloNumVarArray Gridpowersell3(env, totaltime, 0, IloInfinity);//Grid power sold
		IloNumVarArray statoc(env, totaltime, 0, 1);//battery storage capacity
		IloNumVarArray besschg(env, totaltime, 0, 200);//battery charging
		IloNumVarArray bessdis(env, totaltime, 0, 200);//battery discharging
		IloNumVarArray statoc2(env, totaltime, 0, 1);//battery storage capacity
		IloNumVarArray besschg2(env, totaltime, 0, 250);//battery charging
		IloNumVarArray bessdis2(env, totaltime, 0, 250);//battery discharging
		IloNumVarArray statoc3(env, totaltime, 0, 1);//battery storage capacity
		IloNumVarArray besschg3(env, totaltime, 0, 320);//battery charging
		IloNumVarArray bessdis3(env, totaltime, 0, 320);//battery discharging
		IloNumVarArray dg1power(env, totaltime, 0, 780);//DGA power generation range at MG1
		IloNumVarArray dg2power(env, totaltime, 0, 820);//DGA power generation range at MG2
		IloNumVarArray dg3power(env, totaltime, 0, 900);//DGA power generation range at MG3
		IloNumVarArray S12(env, totaltime, 0, IloInfinity);//inter grid power send from MG1 to MG2
		IloNumVarArray S21(env, totaltime, 0, IloInfinity);//inter grid power send from MG2
		IloNumVarArray S23(env, totaltime, 0, IloInfinity);//inter grid power send from MG3
		IloNumVarArray S32(env, totaltime, 0, IloInfinity);//inter grid power received to MG1
		IloNumVarArray S13(env, totaltime, 0, IloInfinity);//inter grid power received to MG2
		IloNumVarArray S31(env, totaltime, 0, IloInfinity);//inter grid power received to MG3
		IloNumVarArray R12(env, totaltime, 0, IloInfinity);//inter grid power send from MG1
		IloNumVarArray R21(env, totaltime, 0, IloInfinity);//inter grid power send from MG2
		IloNumVarArray R23(env, totaltime, 0, IloInfinity);//inter grid power send from MG3
		IloNumVarArray R32(env, totaltime, 0, IloInfinity);//inter grid power received to MG1
		IloNumVarArray R13(env, totaltime, 0, IloInfinity);//inter grid power received to MG2
		IloNumVarArray R31(env, totaltime, 0, IloInfinity);//inter grid power received to MG3

		IloExpr solutio(env, totaltime);


		for (i = 0; i < totaltime; i++)
		{
			solutio += dg1cost*dg1power[i] + gridbuy[i] * Gridpowerbuy1[i] - gridsell[i] * Gridpowersell1[i]+ dg2cost*dg2power[i] + gridbuy[i] * Gridpowerbuy2[i] - gridsell[i] * Gridpowersell2[i]+ dg3cost*dg3power[i] + gridbuy[i] * Gridpowerbuy3[i] - gridsell[i] * Gridpowersell3[i];

		}
		// Objective: minimize cost
		model.add(IloMinimize(env, solutio));

		// Constraint: meet demand

		for (i = 0; i < totaltime; i++)
		{
			model.add(0 <= dg1power[i]);
			model.add(dg1power[i] <= 780);
			model.add(0 <= dg2power[i]);
			model.add(dg2power[i] <= 820);
			model.add(0 <= dg3power[i]);
			model.add(dg3power[i] <= 900);
			model.add(0 <= statoc[i]);
			model.add(statoc[i] <= 1);
			model.add(0 <= statoc2[i]);
			model.add(statoc2[i] <= 1);
			model.add(0 <= statoc3[i]);
			model.add(statoc3[i] <= 1);
			model.add(S12[i]==R12[i]);
			model.add(S13[i]==R13[i]);
			model.add(S21[i]==R21[i]);
			model.add(S23[i]==R23[i]);
			model.add(S31[i]==R31[i]);
			model.add(S32[i]==R32[i]);
			model.add((Gridpowerbuy1[i] >= 1) == (S12[i] == 0 && S13[i] == 0));
			model.add((Gridpowerbuy2[i] >= 0.1) == (S21[i] == 0 && S23[i] == 0));
			model.add((Gridpowerbuy3[i] >= 1) == (S31[i] == 0 && S32[i] == 0));
			model.add((S12[i] >= 1 || S13[i] >= 1) == (R21[i] == 0 && R31[i] == 0));
			model.add((R31[i] >= 1 || R21[i] >= 1) == (S12[i] == 0 && S13[i] == 0));
			model.add((S21[i] >= 1 || S23[i] >= 1) == (R12[i] == 0 && R32[i] == 0));
			model.add((R21[i] >= 1 || R31[i] >= 1) == (S21[i] == 0 && S23[i] == 0));
			model.add((S31[i] >= 1 || S32[i] >= 1) == (R13[i] == 0 && R23[i] == 0));
			model.add((R23[i] >= 1 || R13[i] >= 1) == (S31[i] == 0 && S32[i] == 0));
			/*model.add((S12[i] >= 1) == (S23[i] == 0));*/
	
			if (i == 0)
			{
				model.add(statoc[i] == 0 + ((0.96*besschg[i] - (bessdis[i] / 0.96)) / 180));
				model.add(0 <= besschg[i]);
				model.add(0 <= bessdis[i]);
				model.add(besschg[i] <= (180 * (1 - 0) / 0.96));
				model.add(bessdis[i] <= (180 * 0 * 0.96));
				model.add(statoc2[i] == 0 + ((0.96*besschg2[i] - (bessdis2[i] / 0.96)) / 230));
				model.add(0 <= besschg2[i]);
				model.add(0 <= bessdis2[i]);
				model.add(besschg2[i] <= (230 * (1 - 0) / 0.96));
				model.add(bessdis2[i] <= (230 * 0 * 0.96));
				model.add(statoc3[i] == 0 + ((0.95*besschg3[i] - (bessdis3[i] / 0.95)) / 300));
				model.add(0 <= besschg3[i]);
				model.add(0 <= bessdis3[i]);
				model.add(besschg3[i] <= (300 * (1 - 0) / 0.95));
				model.add(bessdis3[i] <= (300 * 0 * 0.95));


			}
			else
			{
				model.add(statoc[i] == statoc[i - 1] + ((0.96*besschg[i] - (bessdis[i] / 0.96)) / 180));
				model.add(0 <= besschg[i]);
				model.add(0 <= bessdis[i]);
				model.add(besschg[i] <= (180 * (1 - statoc[i - 1])) / 0.96);
				model.add(bessdis[i] <= 180 * statoc[i - 1] * 0.96);
				model.add(statoc2[i] == statoc2[i - 1] + ((0.96*besschg2[i] - (bessdis2[i] / 0.96)) / 230));
				model.add(0 <= besschg2[i]);
				model.add(0 <= bessdis2[i]);
				model.add(besschg2[i] <= (230 * (1 - statoc2[i - 1])) / 0.96);
				model.add(bessdis2[i] <= 230 * statoc2[i - 1] * 0.96);
				model.add(statoc3[i] == statoc3[i - 1] + ((0.95*besschg3[i] - (bessdis3[i] / 0.95)) / 300));
				model.add(0 <= besschg3[i]);
				model.add(0 <= bessdis3[i]);
				model.add(besschg3[i] <= (300 * (1 - statoc3[i - 1])) / 0.95);
				model.add(bessdis3[i] <= 300 * statoc3[i - 1] * 0.95);

			}
			model.add(dg1power[i] + Gridpowerbuy1[i] + rdg1[i] + bessdis[i] - besschg[i] - Gridpowersell1[i] + R21[i] + R31[i] == electricload1[i]+ S13[i]+ S12[i]);
			model.add(dg2power[i] + Gridpowerbuy2[i] + rdg2[i] + bessdis2[i] - besschg2[i] - Gridpowersell2[i] + R12[i]+ R32[i] == electricload2[i]+ S21[i]+ S23[i]);
			model.add(dg3power[i] + Gridpowerbuy3[i] + rdg3[i] + bessdis3[i] - besschg3[i] - Gridpowersell3[i] + R13[i]+ R23[i] == electricload3[i]+ S31[i] + S32[i]);
		}


		IloCplex cplex(env);
		cplex.extract(model);
		



		cplex.solve();

		cout << "Solution status: " << cplex.getStatus() << endl;

		cout << "Minimized Objective Funtion " << cplex.getObjValue() << endl;

		cout << "DGA" <<'\t'<< "CHPA" << '\t' << "Grid" << '\t' << "Grid power sell" << '\t' << "PV" << '\t' << "DEmand" << '\t' << "SOC" << '\t' << "charging" << '\t' << "discharging" << endl;

		for (i = 0; i < totaltime; i++)
		{
			/*cout << cplex.getValue(S12[i]) << '\t' << cplex.getValue(S13[i]) << '\t' << cplex.getValue(S21[i]) << '\t' << cplex.getValue(S23[i]) << '\t' << cplex.getValue(S31[i]) << '\t' << cplex.getValue(S32[i]) << '\t' << cplex.getValue(R12[i]) << '\t' << cplex.getValue(R13[i]) << '\t' << cplex.getValue(R21[i]) << '\t' << cplex.getValue(R23[i]) << '\t' << cplex.getValue(R31[i]) << '\t' << cplex.getValue(R32[i]) << endl;*/
			/*cout << cplex.getValue(dg1power[i]) << '\t' << cplex.getValue(dg2power[i]) << '\t' << cplex.getValue(dg3power[i]) << '\t' <<rdg1[i]<<'\t'<< rdg2[i] << '\t' << rdg3[i] << '\t' <<electricload1[i]<< '\t' << electricload2[i] << '\t' << electricload3[i] << endl;*/
			cout << cplex.getValue(Gridpowerbuy1[i]) << '\t' << cplex.getValue(Gridpowersell1[i]) << '\t' << cplex.getValue(Gridpowerbuy2[i]) << '\t' << cplex.getValue(Gridpowersell2[i]) << '\t' << cplex.getValue(Gridpowerbuy3[i]) << '\t' << cplex.getValue(Gridpowersell3[i]) << '\t' << endl;
			/*cout << cplex.getValue(statoc[i]*100) << '\t' << cplex.getValue(besschg[i]) << '\t' << cplex.getValue(bessdis[i]) << '\t' << cplex.getValue(statoc2[i]*100) << '\t' << cplex.getValue(besschg2[i]) << '\t' << cplex.getValue(bessdis2[i]) << '\t' << cplex.getValue(statoc3[i]*100) << '\t' << cplex.getValue(besschg3[i]) << '\t' << cplex.getValue(bessdis3[i]) << endl;*/
		}
		IloNum eps = cplex.getParam(
			IloCplex::Param::MIP::Tolerances::Integrality);
	}
	catch (IloException& ex) {
		cerr << "Error: " << ex << endl;
	}

	env.end();
	system("pause");
	return 0;
}